ATTENTION: PYTHON STACK SE

Assignment

Write a Python list comprehension to filter out all the vowels from a given string and store them in a list.
Ans
text = "Hello, World!"

# List comprehension to filter out vowels
vowels = [char for char in text if char.lower() in 'aeiou']
print(vowels)


Given two lists numbers1 and numbers2, write a Python list comprehension to generate a list of tuples where each tuple contains corresponding elements from numbers1 and numbers2 multiplied together.

Ans

numbers1 = [1, 2, 3, 4]
numbers2 = [5, 6, 7, 8]


Write a Python function that accepts a variable number of arguments using *args and returns the concatenation of all the strings passed as arguments.

Answer1
def concatenate_strings(*args):
    return ''.join(args)

# Example usage
result = concatenate_strings('Hello', ', ', 'World', '!')
print(result)

Create a Python function that takes in a variable number of keyword arguments using **kwargs. The function should print each key-value pair in the format "Key: Value".

Ans 2
def print_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")


Write a Python function that accepts both positional arguments (*args) and keyword arguments (**kwargs). The function should print the total number of positional arguments passed and then print each keyword argument along with its value.

def print_args_and_kwargs(*args, **kwargs):
    print("Positional arguments:")
    for arg in args:
        print(arg)
    print("\nKeyword arguments:")
    for key, value in kwargs.items():
        print(f"{key}: {value}")

# Example usage
print_args_and_kwargs('a', 'b', 'c', name='Alice', age=30)

# Example usage
print_kwargs(name='Alice', age=30, city='Wonderland')



# List comprehension to generate list of tuples
multiplied_tuples = [(x, y) for x, y in zip(numbers1, numbers2)]
print(multiplied_tuples)



Question 1.

Following below instructions, write a program that prints numbers from 0 to 99:
1. Numbers must be separated by ,, followed by a space
2. Numbers should be printed in ascending order, with two digits
print(output, end=',')  f"{:02d}"


a = 2
print(f"{a:02d}")

num = 0
print(num)
while(num < 97):
	if(num%2 == 0)
		print(num)
	num = num + 1


Your output should look like this:

00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99

Question 2

Kindly, visit "https://pythonexamples.org/exercises/for-loop/ " and solve exercise 1 to exercise 4



Question 3: 

You have a list of cities. Write a Python program that generates HTML <option> elements for each city, suitable for use in a dropdown menu.

The output should look like this:

<select>
<option value='new york'>New York</option>
<option value='los angeles'>Los Angeles</option>
<option value='chicago'>Chicago</option>
<option value='houston'>Houston</option>
<option value='phoenix'>Phoenix</option>
</select>


Question 3

Given a list of article titles, write a Python program that generates HTML anchor tags linking to each article's page on a website.

article_titles = ['Introduction to Python', 'Advanced Data Structures', 'Web Development with Django']

html = "<ul>\n"
for title in article_titles:
    html += f"<li><a href='/articles/{title.replace(' ', '-').lower()}'>{title}</a></li>\n"
html += "</ul>"
print(html)

The output should look like this:

<ul>
<li><a href='/articles/introduction-to-python'>Introduction to Python</a></li>
<li><a href='/articles/advanced-data-structures'>Advanced Data Structures</a></li>
<li><a href='/articles/web-development-with-flask'>Web Development with Django</a></li>
</ul>


Question 4: Generating Option Elements in a Dropdown

You have a list of cities. Write a Python program that generates HTML <option> elements for each city, suitable for use in a dropdown menu.

cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']

html = "<select>\n"
for city in cities:
    html += f"<option value='{city.lower()}'>{city}</option>\n"
html += "</select>"

print(html)

The output should look like this:

<select>
<option value='new york'>New York</option>
<option value='los angeles'>Los Angeles</option>
<option value='chicago'>Chicago</option>
<option value='houston'>Houston</option>
<option value='phoenix'>Phoenix</option>
</select>




















Question 1:

Write a python program to check if the season is Autumn, Winter, Spring or Summer. If the user input is: September, October or November, the season is Autumn. December, January or February, the season is Winter. March, April or May, the season is Spring June, July or August, the season is Summer. Otherwise prompt the user that the season is unrecognized


Question 2:

Here we have a person dictionary:

        person={
    'first_name': 'Asabeneh',
    'last_name': 'Yetayeh',
    'age': 250,
    'country': 'Finland',
    'is_marred': True,
    'skills': ['JavaScript', 'React', 'Node', 'MongoDB', 'Python'],
    'address': {
        'street': 'Space street',
        'zipcode': '02210'
    }
    }

i) Check if the person dictionary has skills key, if so print out the middle skill in the skills list.
ii) Check if the person dictionary has skills key, if so check if the person has 'Python' skill and print out the result.
iii) Check if the person is married and if he lives in Finland, print the information in the following format:

    Asabeneh Yetayeh lives in Finland. He is married.




 * Check if the person dictionary has skills key, if so print out the middle skill in the skills list.
 * Check if the person dictionary has skills key, if so check if the person has 'Python' skill and print out the result.
 * If a person skills has only JavaScript and React, print('He is a front end developer'), if the person skills has Node, Python, MongoDB, print('He is a backend developer'), if the person skills has React, Node and MongoDB, Print('He is a fullstack developer'), else print('unknown title') - for more accurate results more conditions can be nested!
 * If the person is married and if he lives in Finland, print the information in the following format:




Question 1: 
What types of literals are the following two examples?
"Hello ", "007"

Question 2:
What types of literals are the following four examples?
"1.5", 2.0, 528, False

Question 3:
Write a python comment saying 'Day 1 python programming'

Question 4:
Declare an age variable and assign a value to it

Question 5:
Declare 5 as num_one and 4 as num_two
Calculate num_one to the power of num_two and assign the value to a variable exp

Question 6:
a = 1
b = 3
print('{} / {} = {:.2f}'.format(a, b, a / b))

Follow the above  pattern to display your result and compute the quotient of 4 divided by 3 and the quotient should be expressed in 4 decimal places

Question 7:
Write a script that prompts the user to enter number of years. Calculate the number of seconds a person can live. Assume a person can live hundred years

Your prompt and output should look like this:

Enter number of years you have lived: 100

You have lived for 3153600000 seconds.

Question 8
Determine the output of this print statement

greeting = 'Hello, World!'
print(greeting[::-1])

Question 9
Converts all characters of below string to capital letter and display the output
challenge = 'thirty days of python'

Question 10
Write python program to replace the word coding in the string 'Coding For All' to Python and print out the result

Question 11
Use the string formatting method to display the following:
radius = 10
area = 3.14 * radius ** 2
The area of a circle with radius 10 is 314 meters square.

Question 11
The following list contains the names of some of python libraries: ['Django', 'Flask', 'Bottle', 'Pyramid', 'Falcon']. Join the list with a hash with space string.

Question 12
Write a python program to create an acronym or an abbreviation for the name 'Python For Everyone'.



Write a python comment saying 'Day 1 python programming'
Declare a first name variable and assign a value to it
Declare a variable is_married and assign a value to it
Declare an age variable and assign a value to it
Declare a country variable and assign a value to it
Declare a variable is_light_on and assign a value to it
Declare multiple variable on one line

Declare 5 as num_one and 4 as num_two
Add num_one and num_two and assign the value to a variable total
Subtract num_two from num_one and assign the value to a variable diff
Multiply num_two and num_one and assign the value to a variable product
Divide num_one by num_two and assign the value to a variable division
Use modulus division to find num_two divided by num_one and assign the value to a variable remainder
Calculate num_one to the power of num_two and assign the value to a variable exp
Find floor division of num_one by num_two and assign the value to a variable floor_division

Question 1: What is the expected output of the following snippet?
print((2 ** 4), (2 * 4.), (2 * 4))
print((-2 / 4), (2 / 4), (2 // 4), (-2 // 4))
print((2 % -4), (2 % 4), (2 ** 3 ** 2))


Question 4: What is the output of the following snippet?
a = 6
b = 3
a /= 2 * b
print(a)

LAB
Operators and expressions

Your task is to prepare a simple code able to evaluate the end time of a period of time, given as a number of minutes (it could be arbitrarily large). The start time is given as a pair of hours (0..23) and minutes (0..59). The result has to be printed to the console.

For example, if an event starts at 12:17 and lasts 59 minutes, it will end at 13:16.

Test Data
Sample input:
12
17
59

Expected output:
13:16

Sample input:  23   58   642   Expected Output 10:40

Sample input:  0   1   2939   Expected Output 1:0
.......
code:
hour = int(input("Starting time (hours): "))
mins = int(input("Starting time (minutes): "))
dura = int(input("Event duration (minutes): "))

# Write your code here.
.....

Hint
hour = int(input("Starting time (hours): "))
mins = int(input("Starting time (minutes): "))
dura = int(input("Event duration (minutes): "))
# find a total of all minutes
# find a number of hours hidden in minutes and update the hour
# correct minutes to fall in the (0..59) range
# correct hours to fall in the (0..23) range
print(hour, ":", mins, sep='')



Sample Solution
hour = int(input("Starting time (hours): "))
mins = int(input("Starting time (minutes): "))
dura = int(input("Event duration (minutes): "))
mins = mins + dura # find a total of all minutes
hour = hour + mins // 60 # find a number of hours hidden in minutes and update the hour
mins = mins % 60 # correct minutes to fall in the (0..59) range
hour = hour % 24 # correct hours to fall in the (0..23) range
print(hour, ":", mins, sep='')

Question 2: What is the expected output of the following snippet?
x = input("Enter a number: ") # The user enters 2
print(type(x))

Question 11
What is the output of the following snippet?
x = 1
y = 2
z = x
x = y
y = z
print(x, y)

Function

Question 1: What is the output of the following snippet?
def intro(a="James Bond", b="Bond"):
     print("My name is", b + ".", a + ".")
 
intro()

Ans. My name is Bond. James Bond.

Question 2: What is the output of the following snippet?
def intro(a="James Bond", b="Bond"):
    print("My name is", b + ".", a + ".")
 
intro(b="Sean Connery")

Ans. My name is Sean Connery. James Bond.

Question 3: What is the output of the following snippet?
def intro(a, b="Bond"):
    print("My name is", b + ".", a + ".")
 
intro("Susan")

Ans My name is Bond. Susan.

Question 4: What is the output of the following snippet?
def add_numbers(a, b=2, c):
    print(a + b + c)
 
add_numbers(a=1, c=3)

Ans SyntaxError - a non-default argument (c) follows a default argument (b=2).

Question  
Write a script that prompts the user to enter number of years. Calculate the number of seconds a person can live. Assume a person can live hundred years

Your prompt and output should look like this:

Enter number of years you have lived: 100

You have lived for 3153600000 seconds.

Question 3: What is the decimal value of the following binary number?

Tokenize the string: ["Python", "is", "Amazing"]
Extract the first characters: ["P", "i", "A"]
Convert to uppercase: ["P", "I", "A"]
Combine to form the acronym: "PIA"

def create_acronym(phrase):
   acronym = ""
   words = phrase.split()
   for word in words:
      acronym += word[0].upper()
   return acronym

input_phrase = "Python is Amazing"
result = create_acronym(input_phrase)
print(result) 
1011

Elaborate on your plans for further development during the master; your target proficiency levels:

I would like to improve on my software development skill. I would like to revisit hardware interfacing and master it since I left it in 2010. Last year, I tried to customise the control panel of a router to enhance the user friendliness. As such, I would like to acquire  a deeper experience in user interface to attain industry standard. I have no experience in Organisational processes but I strongly feel that knowing it will contribute to my attainment of industry standard in other areas aforementioned.

Elaborate on your plans for further development during the master; your target proficiency levels:

I would like to improve on my software development skill. I would like to revisit hardware interfacing and master it since I left it in 2010. Last year, I tried to customise the control panel of a router to enhance the user friendliness. As such, I would like to acquire  a deeper experience in user interface to attain industry standard. I have no experience in Organisational processes but I strongly feel that knowing it will contribute to my attainment of industry standard in other areas aforementioned.

Add examples of your prior experience to support your evaluation of your proficiency levels:

For Software development, I have gone for bootcamp in preparation for my masters and have done a quite number of projects whose codse can be accessed on my github. I hosted a few of them. 
In year 2010, my final year project was based on temperature monitoring and recording device in which I had to interface my PIC microcontroller with a temperature sensor and other electronic components. 
 Last year, I tried to customise the control panel of a router to enhance the user friendliness

My commitment to continuous learning is evident in his pursuit of certifications and staying updated with the latest industry trends.

With a track record of emerging the best member of staff at Cobranet Limited, I have proven my value through contributions such as overseeing enterprise technological infrastructure, providing escalated technical support, participating in strategic decision-making and training of new employees.

IF STATEMENT

Practice: Which Prize

Write an if statement that lets a competitor know which of these prizes they 

You decide you want to play a game where you are hiding a number from someone. Store this number in a variable called answer. Another user provides a number called guess. By comparing 'guess' to 'answer', you inform the user if their guess is too high or too low. 

Write a function which checks if all the items of the list are of the same data type
Write a function which check if provided variable is a valid python variable

Declare a function named add_item. It takes a list and an item parameters. It returns a list with the item added at the end.

food_staff = ['Potato', 'Tomato', 'Mango', 'Milk'];
print(add_item(food_staff, 'Meat'))     # ['Potato', 'Tomato', 'Mango', 'Milk','Meat'];
numbers = [2, 3, 7, 9];
print(add_item(numbers, 5))      [2, 3, 7, 9, 5]



Declare a function named remove_item. It takes a list and an item parameters. It returns a list with the item removed from it.

food_staff = ['Potato', 'Tomato', 'Mango', 'Milk']
print(remove_item(food_staff, 'Mango'))  # ['Potato', 'Tomato', 'Milk'];
numbers = [2, 3, 7, 9];
print(remove_item(numbers, 3))  # [2, 7, 9]

Write a function called check_season, it takes a month parameter and returns the season: Autumn, Winter, Spring or Summer.

food_staff = ['Potato', 'Tomato', 'Mango', 'Milk'];
print(remove_item(food_staff, 'Mango'))  # ['Potato', 'Tomato', 'Milk'];
numbers = [2, 3, 7, 9];
print(remove_item(numbers, 3))  # [2, 7, 9]

Function

Question 1: What is the output of the following snippet?

def hi():
    return
    print("Hi!")
 
hi()


Question 2: What is the output of the following snippet?

def is_int(data):
    if type(data) == int:
        return True
    elif type(data) == float:
        return False
    else:
        return("unaccepted")
 
print(is_int(5))
print(is_int(5.0))
print(is_int("5"))



Question 3: What is the output of the following snippet?

def even_num_lst(ran):
    lst = []
    for num in range(ran):
        if num % 2 == 0:
            lst.append(num)
    return lst
 
print(even_num_lst(11))



Question 4: What is the output of the following snippet?

def list_updater(lst):
    upd_list = []
    for elem in lst:
        elem **= 2
        upd_list.append(elem)
    return upd_list
 
foo = [1, 2, 3, 4, 5]
print(list_updater(foo))




Ans 4: [1, 4, 9, 16, 25]
Ans 3: [0, 2, 4, 6, 8, 10]
Ans 2. True
False
None
Ans 1. The function will return an implicit None value.


Question 1: User Authentication

In a web application, you have a dictionary where keys are usernames and values are dictionaries containing password hashes and other user-related data. Write a Python program that checks whether a given username and password match the entries in the dictionary.

users = {
    'alice': {'password': 'hashed_password1', 'email': 'alice@example.com'},
    'bob': {'password': 'hashed_password2', 'email': 'bob@example.com'}
}

def authenticate(username, password):
    if username in users and users[username]['password'] == hash_function(password):
        return True
    else:
        return False

def hash_function(password):
    # Hashing function implementation
    return password

username = input("Enter username: ")
password = input("Enter password: ")

if authenticate(username, password):
    print("Authentication successful.")
else:
    print("Authentication failed.")

Question 2: Access Control

roles = {
    'admin': ['read', 'write', 'delete'],
    'user': ['read']
}

def check_permission(role, permission):
    if role in roles and permission in roles[role]:
        return True
    else:
        return False

role = input("Enter user role: ")
permission = input("Enter required permission: ")

if check_permission(role, permission):
    print("Permission granted.")F
else:
    print("Permission denied.")

Question 3: Localization

Understanding Scope in Python Functions

In Python, scope defines the visibility and accessibility of variables within your code. It determines where a variable can be accessed or modified. Understanding scope is crucial when working with functions because it helps you manage variables effectively and avoid naming conflicts.

How Scope Affects Variables in Functions

In Python, variables can have two main scopes:

1. Local Scope: Variables defined inside a function are considered local and can only be accessed within that function. They are not visible outside of the function.

2. Global Scope: Variables defined outside of any function have a global scope and can be accessed from anywhere in your code, including within functions.

Submission of Portfolio n other docs for Student number: 5490065
fhictmaster@fontys.nl


Question 1: What is the output of the following snippet?

def intro(a="James Bond", b="Bond"):
     print("My name is", b + ".", a + ".")
 
intro()


Question 3: What is the output of the following snippet?

def intro(a, b="Bond"):
    print("My name is", b + ".", a + ".")
 
intro("Susan")

Question 2: What is the output of the following snippet?
def intro(a="James Bond", b="Bond"):
    print("My name is", b + ".", a + ".")
 
intro(b="Sean Connery")

Ans. My name is Bond. Susan.

Question 4: What is the output of the following snippet?
def add_numbers(a, b=2, c):
    print(a + b + c)
 
add_numbers(a=1, c=3)

Ans: SyntaxError - a non-default argument (c) follows a default argument (b=2).

Question 2: What is the output of the following snippet?
def fun(a):
    if a > 30:
        return 3
    else:
        return a + fun(a + 3)
 
 
print(fun(25))

Ans:56

Question 1: What is the output of the following program if the user enters 0?
try:
    value = int(input("Enter a value: "))
    print(value/value)
except ValueError:
    print("Bad input...")
except ZeroDivisionError:
    print("Very bad input...")
except:
    print("Booo!")

Ans: Very bad input...

Question 1: Which of the following is not the built-in error type?
A. EOFError
B. IndexError
C. KeyError
D. LoopError

Ans D
What type of error will be raised when the imported module is not found?
A. NullError
B. NameError
C. ImportError
D. ReferenceError
Ans. C

Waht will be the output of the following code?

def fn(x):
    try:
        print(5/x)
    except:
        print("Error occurred")

fn(0)

A. 5
B. 0.0
C. Error occurred
D. ZeroDivisionError: division by zero

Ans: C

What will be the output of the following code?

def fn(x):
    try:
        print(5/x)
    except ZeroDivisionError:
        print("except block")
    else:
        print("else block")
    finally:
        print("finally block")
fn(0)

A. else block
B. except block
C. SyntaxError
D. ValueError

Ans. B

Which of the following keyword is used to raise an error in Python

A. except
B. raise
C. throw
D throw Except()

Ans. B

What is the output of the following code?

fn = lambda x : x * x
print(fn(4))

A. 4
B. 8
C. 16
D. Error
Ans. 16

Why would you use *args and **kwargs in a function definition?

A. To make the function easier to read
B. To allow for a varying number of arguments or keyword arguments
C. To make the function run faster

What are the key points to remember when working with *args in Python functions?

A. Tuples are mutable, so you can modify the values in *args
B. The name args is just a convention. You can use any name you prefer
C. *args allow you to pass a varying number of positional arguments to a function
D. The iterable object that you get using the unpacking operator * is a tuple
E. You must always use *args together with **kwargs

What happens if you iterate over a Python kwargs dictionary without using .values()?
A. You iterate over the keys of the dictionary
B. You iterate over the values of the dictionary
C. You get a TypeError
D. The dictionary created from using **kwargs isn't iterable.

An exception is a condition that arises during the execution of a program. It is a signal that something unexpected happened. Python represents exceptions by an object of a specific type.


Write a function named readable_timedelta. the function should take one argument, an integer days, and return a string that says how many weeks and days that is. For example, calling the function and printing the result like this:

print(readable_timedelta(10))

should output the following:

1 week(s) and 3 day(s)

In Python, all built-in, non-system-exiting exceptions are derived from the Exception class. Exceptions have their own, descriptive names. For example, if you try to divide a number by zero, you will get a ZeroDivisionError exception, which is also a subclass of the Exception class.


Question 20

Create a Python function that reads an integer input from the user using the input() function. Use a try-except block to handle the ValueError exception if the user enters a non-integer value. Continuously prompt the user until a valid integer is entered.

Ans
def read_integer():
    while True:
        try:
            num = int(input("Enter an integer: "))
            return num
        except ValueError:
            print("Error: Please enter a valid integer.")

# Example usage
integer = read_integer()
print("You entered:", integer)

Write a Python function that opens a file specified by the user and prints its content. Use a try-except block to handle the FileNotFoundError exception if the file does not exist. Print a custom error message in such cases.

def read_file(file_name):
    try:
        with open(file_name, 'r') as file:
            content = file.read()
            print(content)
    except FileNotFoundError:
        print("Error: The file does not exist.")

# Example usage
read_file("example.txt")